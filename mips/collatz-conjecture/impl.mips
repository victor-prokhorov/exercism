# | Register | Usage     | Type    | Description                                       |
# | -------- | --------- | ------- | ------------------------------------------------- |
# | `$a0`    | input     | integer | starting number                                   |
# | `$t0`    | output    | integer | expected number of steps, -1 if number is invalid |
# | `$t0-9`  | temporary | any     | used for temporary storage                        |

.globl  steps

steps:
        li      $v0     0               # count
        move    $t0     $a0             # value
        #       $t1                       neg_check then rem
        li      $t2     2
        li      $t3     3
        slt     $t1     $a0     $zero   # input less then zero
        move    $v0     $t1
        bne     $t1     $zero   invalid_input_exit     
main_loop:
        beq     $t0     1       the_end
        addi    $v0     $v0     1       # increment counter
        div     $t0     $t2             
        mfhi    $t1                     # load the % part of the `div`
        beq     $t1     $zero   even    # x % 2 == 0
        j       odd
even:
        div     $t0     $t2
        mflo    $t0
        j       main_loop
odd:
        mult    $t0     $t3
        mflo    $t0
        addi    $t0     $t0     1
        j       main_loop
the_end:
        jr      $ra
invalid_input_exit:
        li      $v0     -1
        jr      $ra
