# | Register | Usage        | Type    | Description                         |
# | -------- | ------------ | ------- | ----------------------------------- |
# | `$a0`    | input        | integer | natural number to be factorized     |
# | `$a1`    | input/output | address | destination array for prime factors |
# | `$v0`    | output       | integer | number of factors                   |
# | `$a0`    | temporary    | integer | candidate factor                    |
# | `$a1`    | temporary    | integer | step to next candidate factor       |

.globl factors

factors:
        move    $v0,$a1             # copy array base address
        li      $t2,2
divide_by_2_loop:
        and     $t3,$a0,1           # get lsb
        bnez    $t3,init_odd_loop   # if integer is odd proceed to odd loop
        sw      $t2,($a1)           # keep pushing 2
        addi    $a1,$a1,4           # advance by word
        srl     $a0,$a0,1
        j       divide_by_2_loop
init_odd_loop:
        li      $t3,3               # start from 3 as candidate
odd_loop:
        beq     $a0,1,exit
        divu    $a0,$t3
        mfhi    $t4
        beqz    $t4,store_odd_candidate
        addi    $t3,$t3,2           # it only make sense to consider odd numbers now
        j       odd_loop
store_odd_candidate:
        sw      $t3,($a1)
        addi    $a1,$a1,4
        mflo    $a0
        j       odd_loop
exit:
        sub     $v0,$a1,$v0         # calculate the offset from base in bytes
        srl     $v0,$v0,2           # convert bytes in words
        jr      $ra
