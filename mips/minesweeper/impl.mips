.data

offsets:
.byte -1, -1,  0, -1,  1, -1
      -1,  0,          1,  0
      -1,  1,  0,  1,  1,  1

.globl annotate

.text

annotate:
        move    $t0, $a0
        move    $t1, $a1
        li      $t2, 0                          # width
        li      $t3, 0                          # height
        li      $t5, 0                          # has found width

calculate_dimensions:
        lb      $t4, ($t0)
        beq     $t4, '\0', setup_main_loop 
        beq     $t4, '\n', set_has_found_width
        addi    $t3, $t3, 1                     # increment characters count
        beq     $t5, 1, skip_increment
        addi    $t2, $t2, 1
        j       skip_increment
set_has_found_width:
        li      $t5, 1
skip_increment:
        addi    $t0, $t0, 1
        j       calculate_dimensions

setup_main_loop:
        li      $t4, 0                          # flatten character index
        div     $t3, $t2                        # divide cumulated characters by width
        mflo    $t3                             # quotient is the height
        move    $t0, $a0
        move    $t1, $a1

main_loop:
        li      $t5, 0                          # adjacent mine count
        lb      $t6, ($t0)
        beq     $t6, '\0', annotate_end
        beq     $t6, '\n', store_new_line
        beq     $t6, '*', store_mine
        la      $v0, offsets
        li      $v1, 0                          # verified adjacent cells count

verify_adjacent_cells:
        addi    $sp, $sp, -4
        sw      $ra, ($sp)
        lb      $a2, ($v0)                      # y offset to verify
        addi    $v0, $v0, 1
        lb      $a3, ($v0)                      # x offset to verify
        addi    $v0, $v0, 1
        jal     verify
        lw      $ra, ($sp)
        addi    $sp, $sp, 4
        addi    $v1, $v1, 1
        beq     $v1, 8, store_setup
        j       verify_adjacent_cells

store_setup:
        li      $t7, '0'                        # mine count as character
        add     $t7, $t7, $t5                   # add mine count
        bne     $t7, '0', store_result
        li      $t7, ' '                        # render ' ' instead of '0'
store_result:
        sb      $t7, ($t1)
        addi    $t0, $t0, 1
        addi    $t1, $t1, 1
        addi    $t4, $t4, 1
        j       main_loop

store_new_line:
        sb      $t6, ($t1)
        addi    $t0, $t0, 1
        addi    $t1, $t1, 1
        j       main_loop

store_mine:
        sb      $t6, ($t1)
        addi    $t0, $t0, 1
        addi    $t1, $t1, 1
        addi    $t4, $t4, 1
        j       main_loop

annotate_end:
        jr      $ra

verify:                                         # verifies if character at offset is a mine
        div     $t4, $t2                        # divid flatten character index by width
        mflo    $t8                             # y
        mfhi    $t9                             # x
        add     $t8, $t8, $a2
        add     $t9, $t9, $a3
        blt     $t9, $zero, verify_end
        blt     $t8, $zero, verify_end
        bge     $t9, $t2, verify_end
        bge     $t8, $t3, verify_end
        mul     $t7, $t8, $t2                   # translate y into offset from base pointer
        add     $t7, $t7, $t8                   # add one per new line character
        add     $t7, $t7, $t9                   # add x
        add     $t7, $t7, $a0                   # character at offset
        lb      $t6, ($t7)
        bne     $t6, '*', verify_end
        addi    $t5, $t5, 1                     # mine found

verify_end:
        jr $ra
